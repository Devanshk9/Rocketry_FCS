// Variables for previous acceleration and time tracking
float prevAx = 0, prevAy = 0, prevAz = 0;
unsigned long prevTime = 0;

void loop() {
  // Update current time and time difference
  unsigned long currentTime = millis();
  float deltaTime = (currentTime - prevTime) / 1000.0; // Convert to seconds

  sensors_event_t a, g, temp;
  mpu.getEvent(&a, &g, &temp);

  // Current acceleration data
  float Ax = a.acceleration.x;
  float Ay = a.acceleration.y;
  float Az = a.acceleration.z;

  // Calculate velocity from acceleration and time difference
  float Vx = prevAx + Ax * deltaTime;
  float Vy = prevAy + Ay * deltaTime;
  float Vz = prevAz + Az * deltaTime;
  float V = sqrt(pow(Vx, 2) + pow(Vy, 2) + pow(Vz, 2)); // Magnitude of velocity

  // Calculate orientation (gyro data)
  float Ox = g.gyro.x;
  float Oy = g.gyro.y;
  float Oz = g.gyro.z;

  // Read altitude, pressure, and temperature
  float altitude_m = bmp.readAltitude(BENGALURU_LOCAL_PRESSURE_HPA);
  float pressure = bmp.readPressure();
  float temperature = bmp.readTemperature();
  long altitude_cm = altitude_m * 100;

  // Prepare data array with velocities, accelerations, orientation, and other data
  uint8_t data[28];
  
  // Store velocities
  data[0] = (int16_t(Vx * 100) >> 8) & 0xFF;
  data[1] = int16_t(Vx * 100) & 0xFF;
  data[2] = (int16_t(Vy * 100) >> 8) & 0xFF;
  data[3] = int16_t(Vy * 100) & 0xFF;
  data[4] = (int16_t(Vz * 100) >> 8) & 0xFF;
  data[5] = int16_t(Vz * 100) & 0xFF;

  // Store acceleration
  data[6] = (int16_t(Ax * 100) >> 8) & 0xFF;
  data[7] = int16_t(Ax * 100) & 0xFF;
  data[8] = (int16_t(Ay * 100) >> 8) & 0xFF;
  data[9] = int16_t(Ay * 100) & 0xFF;
  data[10] = (int16_t(Az * 100) >> 8) & 0xFF;
  data[11] = int16_t(Az * 100) & 0xFF;

  // Orientation
  data[12] = (int16_t(Ox * 100) >> 8) & 0xFF;
  data[13] = int16_t(Ox * 100) & 0xFF;
  data[14] = (int16_t(Oy * 100) >> 8) & 0xFF;
  data[15] = int16_t(Oy * 100) & 0xFF;
  data[16] = (int16_t(Oz * 100) >> 8) & 0xFF;
  data[17] = int16_t(Oz * 100) & 0xFF;

  // Altitude, temperature, and pressure
  data[18] = (altitude_cm >> 8) & 0xFF;
  data[19] = altitude_cm & 0xFF;
  data[20] = (int16_t(temperature * 100) >> 8) & 0xFF;
  data[21] = int16_t(temperature * 100) & 0xFF;
  data[22] = (pressure >> 8) & 0xFF;
  data[23] = pressure & 0xFF;

  // Send data via LoRa
  LoRa.beginPacket();
  LoRa.write(data, sizeof(data));
  LoRa.endPacket();

  // Store current accelerations and time for next iteration
  prevAx = Ax;
  prevAy = Ay;
  prevAz = Az;
  prevTime = currentTime;

  Serial.println("Data sent!");
}
