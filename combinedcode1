#include <Wire.h>
#include <Adafruit_Sensor.h>
#include <Adafruit_BMP085.h>
#include <Adafruit_MPU6050.h>
#include <SPI.h>
#include <LoRa.h>
#include <Servo.h>


// Create objects for BMP and MPU sensors
Adafruit_BMP085 bmp;
Adafruit_MPU6050 mpu;
Adafruit_BMP085_Unified bmp = Adafruit_BMP085_Unified(10085); // Sensor object, 10085 is the sensor ID

Servo myServo;

#define STANDARD_SEA_LEVEL_PRESSURE_HPA 1013.25 // Standard atmospheric pressure at sea level in hPa
#define BENGALURU_LOCAL_PRESSURE_HPA 950.0 // Estimated local pressure at Bengaluru in hPa
float maxAltitude = 0.0; // Variable to store maximum altitude reached

void setup() {
  // Start serial communication for debugging
  Serial.begin(9600);
  Wire.begin();
  
  // Initialize BMP280
  if (!bmp.begin()) {
    Serial.println("Could not find a valid BMP280 sensor, check wiring or address!");
  } else {
    Serial.println("BMP085 sensor found!");
  }

  // Initialize MPU6050
  if (!mpu.begin()) {
    Serial.println("Failed to find MPU6050 chip, check wiring or address!");
  } else {
    Serial.println("MPU6050 sensor found!");
    mpu.setAccelerometerRange(MPU6050_RANGE_8_G);
    mpu.setGyroRange(MPU6050_RANGE_500_DEG);
    mpu.setFilterBandwidth(MPU6050_BAND_21_HZ);
  }
  
  // Initialize LoRa
  Serial.println("Initializing LoRa...");
  if (!LoRa.begin(433E6)) {
    Serial.println("Starting LoRa failed!");
    while (1);
  }
  LoRa.setSyncWord(0x77);
  LoRa.setCodingRate4(5);
  LoRa.setSpreadingFactor(7);
  LoRa.setSignalBandwidth(125E3);
  Serial.println("LoRa initialized.");

  // Attach servo to pin 9
  myServo.attach(9);

  // Start servo at 90 degrees
  myServo.write(90);
  delay(1000); // Delay to allow servo to reach initial position
}

void loop() {
  // Read and print data from BMP280
  sensors_event_t a, g, temp;
  mpu.getEvent(&a, &g, &temp);

  int ax = a.acceleration.x;
  int ay = a.acceleration.y;
  int az = a.acceleration.z;
  int gx = g.gyro.x;
  int gy = g.gyro.y;
  int gz = g.gyro.z;
  int temp1 = temp.temperature;
  int pr = bmp.readPressure();
  int alt = bmp.readAltitude();
  int temp2 = bmp.readTemperature();
  int Temp = (temp1 + temp2) / 2;

sensors_event_t event;
    bmp.getEvent(&event);

    if (event.pressure) {
        float pressure_hPa = event.pressure / 100.0F; // Convert Pa to hPa
        Serial.print("Pressure: ");
        Serial.print(pressure_hPa);
        Serial.println(" hPa");

        // Calculate altitude based on local pressure at Bengaluru
        float altitude_m = bmp.pressureToAltitude(BENGALURU_LOCAL_PRESSURE_HPA, event.pressure);
        Serial.print("Altitude: ");
        Serial.print(altitude_m);
        Serial.println(" meters");

        // Track maximum altitude
        if (altitude_m > maxAltitude) {
            maxAltitude = altitude_m;
        }

        // Control servo based on altitude
        if (altitude_m > 750) {
            // If altitude is above 1000 meters, move servo to 0 degrees
            myServo.write(0);
            Serial.println("Servo moved to 0 degrees.");
        } 
        else {
            // Otherwise, move servo to 90 degrees
            myServo.write(90);
            Serial.println("Servo moved to 90 degrees.");
        }

        // Check if altitude has started decreasing (indicating descent)
        if (altitude_m < maxAltitude*0.99 && maxAltitude > 0) {
            // Rocket has reached peak altitude, spin servo or perform action
            myServo.write(180); // Spin servo to 180 degrees or any action you want
            Serial.println("Rocket reached peak altitude, servo spinning.");
           
            // Reset maxAltitude to prepare for next flight
            maxAltitude = 0.0;
        }
    } else {
        Serial.println("Sensor data not available");
    }

    delay(1000); // Delay between readings

  String data = String("Acc - x: ") + ax + 
                "\nAcc - y: " + ay + 
                "\nAcc - z: " + az + 
                "\nGyro - x: " + gx + 
                "\nGyro - y: " + gy + 
                "\nGyro - z: " + gz + 
                "\nTemperature: " + Temp + 
                "\nPressure: " + pr;
               "\nAltitude: " + altitude_m;

  Serial.println(data); // Print data for debugging

  LoRa.beginPacket();
  LoRa.print(data);
  LoRa.endPacket();
  Serial.println("Data sent!");

  delay(2000); // Delay for readability
}
